import base64
code="aW1wb3J0IHB5bW9uZ28NCmltcG9ydCB1cmxsaWIyDQppbXBvcnQgdXJsbGliDQppbXBvcnQgY29va2llbGliDQppbXBvcnQgcmFuZG9tDQppbXBvcnQgcmUNCmltcG9ydCBzdHJpbmcNCmltcG9ydCBzeXMNCmltcG9ydCBnZXRvcHQNCg0KIyB0aGlzIGlzIGEgdmFsaWRhdGlvbiBwcm9ncmFtIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBibG9nIHdvcmtzIGNvcnJlY3RseS4NCiMgSWYgeW91IGFyZSByZWFkaW5nIHRoaXMgaW4gY2xlYXIgdGV4dCwgeW91IGFyZSBwcm9iYWJseSB2aW9sYXRpbmcgdGhlIGhvbm9yIGNvZGUNCg0KDQojIGRlY2xhcmUgdGhlIHZhcmlhYmxlcyB0byBjb25uZWN0IHRvIGRiDQpjb25uZWN0aW9uID0gTm9uZQ0KZGIgPSBOb25lDQoNCndlYmhvc3QgPSAibG9jYWxob3N0OjgwODAiDQptb25nb3N0ciA9ICJtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3Ig0KZGJfbmFtZSA9ICJibG9nIg0KDQoNCiMgbWFrZXMgYSBsaXR0bGUgc2FsdA0KZGVmIG1ha2Vfc2FsdChuKToNCiAgICBzYWx0ID0gIiINCiAgICBmb3IgaSBpbiByYW5nZShuKToNCiAgICAgICAgc2FsdCA9IHNhbHQgKyByYW5kb20uY2hvaWNlKHN0cmluZy5hc2NpaV9sZXR0ZXJzKQ0KICAgIHJldHVybiBzYWx0DQoNCg0KZGVmIGNyZWF0ZV91c2VyKHVzZXJuYW1lLCBwYXNzd29yZCk6DQogICAgdHJ5Og0KICAgICAgICBwcmludCAiVHJ5aW5nIHRvIGNyZWF0ZSBhIHRlc3QgdXNlciAiLCB1c2VybmFtZQ0KICAgICAgICBjaiA9IGNvb2tpZWxpYi5Db29raWVKYXIoKQ0KICAgICAgICB1cmwgPSAiaHR0cDovL3swfS9zaWdudXAiLmZvcm1hdCh3ZWJob3N0KQ0KDQogICAgICAgIGRhdGEgPSB1cmxsaWIudXJsZW5jb2RlKFsoImVtYWlsIiwiIiksKCJ1c2VybmFtZSIsdXNlcm5hbWUpLCAoInBhc3N3b3JkIixwYXNzd29yZCksICgidmVyaWZ5IixwYXNzd29yZCldKQ0KICAgICAgICByZXF1ZXN0ID0gdXJsbGliMi5SZXF1ZXN0KHVybD11cmwsIGRhdGE9ZGF0YSkNCiAgICAgICAgb3BlbmVyID0gdXJsbGliMi5idWlsZF9vcGVuZXIodXJsbGliMi5IVFRQQ29va2llUHJvY2Vzc29yKGNqKSkNCiAgICAgICAgZiA9IG9wZW5lci5vcGVuKHJlcXVlc3QpDQoNCiAgICAgICAgdXNlcnMgPSBkYi51c2Vycw0KICAgICAgICB1c2VyID0gdXNlcnMuZmluZF9vbmUoeydfaWQnOnVzZXJuYW1lfSkNCiAgICAgICAgaWYgKHVzZXIgPT0gTm9uZSk6DQogICAgICAgICAgICBwcmludCAiQ291bGQgbm90IGZpbmQgdGhlIHRlc3QgdXNlciAiLCB1c2VybmFtZSwgImluIHRoZSB1c2VycyBjb2xsZWN0aW9uLiINCiAgICAgICAgICAgIHJldHVybiBGYWxzZQ0KICAgICAgICBwcmludCAiRm91bmQgdGhlIHRlc3QgdXNlciAiLCB1c2VybmFtZSwgIiBpbiB0aGUgdXNlcnMgY29sbGVjdGlvbiINCg0KICAgICAgICAjIGNoZWNrIHRoYXQgdGhlIHVzZXIgaGFzIGJlZW4gYnVpbHQNCiAgICAgICAgcmVzdWx0ID0gZi5yZWFkKCkNCiAgICAgICAgZXhwciA9IHJlLmNvbXBpbGUoIldlbGNvbWVccysiKyB1c2VybmFtZSkNCiAgICAgICAgaWYgZXhwci5zZWFyY2gocmVzdWx0KToNCiAgICAgICAgICAgIHJldHVybiBUcnVlDQogICAgICAgIA0KICAgICAgICBwcmludCAiV2hlbiB3ZSB0cmllZCB0byBjcmVhdGUgYSB1c2VyLCBoZXJlIGlzIHRoZSBvdXRwdXQgd2UgZ290XG4iDQogICAgICAgIHByaW50IHJlc3VsdA0KICAgICAgICANCiAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgZXhjZXB0Og0KICAgICAgICBwcmludCAidGhlIHJlcXVlc3QgdG8gIiwgdXJsLCAiIGZhaWxlZCwgc28geW91ciBibG9nIG1heSBub3QgYmUgcnVubmluZy4iDQogICAgICAgIHJldHVybiBGYWxzZQ0KDQoNCmRlZiB0cnlfdG9fbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKToNCg0KICAgIHRyeToNCiAgICAgICAgcHJpbnQgIlRyeWluZyB0byBsb2dpbiBmb3IgdGVzdCB1c2VyICIsIHVzZXJuYW1lDQogICAgICAgIGNqID0gY29va2llbGliLkNvb2tpZUphcigpDQogICAgICAgIHVybCA9ICJodHRwOi8vezB9L2xvZ2luIi5mb3JtYXQod2ViaG9zdCkNCg0KICAgICAgICBkYXRhID0gdXJsbGliLnVybGVuY29kZShbKCJ1c2VybmFtZSIsdXNlcm5hbWUpLCAoInBhc3N3b3JkIixwYXNzd29yZCldKQ0KICAgICAgICByZXF1ZXN0ID0gdXJsbGliMi5SZXF1ZXN0KHVybD11cmwsIGRhdGE9ZGF0YSkNCiAgICAgICAgb3BlbmVyID0gdXJsbGliMi5idWlsZF9vcGVuZXIodXJsbGliMi5IVFRQQ29va2llUHJvY2Vzc29yKGNqKSkNCiAgICAgICAgZiA9IG9wZW5lci5vcGVuKHJlcXVlc3QpDQoNCiAgICAgICAgIyBjaGVjayBmb3Igc3VjY2Vzc2Z1bCBsb2dpbg0KICAgICAgICByZXN1bHQgPSBmLnJlYWQoKQ0KICAgICAgICBleHByID0gcmUuY29tcGlsZSgiV2VsY29tZVxzKyIrIHVzZXJuYW1lKQ0KICAgICAgICBpZiBleHByLnNlYXJjaChyZXN1bHQpOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCg0KICAgICAgICBwcmludCAiV2hlbiB3ZSB0cmllZCB0byBsb2dpbiwgaGVyZSBpcyB0aGUgb3V0cHV0IHdlIGdvdFxuIg0KICAgICAgICBwcmludCByZXN1bHQNCiAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgZXhjZXB0Og0KICAgICAgICBwcmludCAidGhlIHJlcXVlc3QgdG8gIiwgdXJsLCAiIGZhaWxlZCwgc28geW91ciBibG9nIG1heSBub3QgYmUgcnVubmluZy4iDQogICAgICAgIHJhaXNlDQogICAgICAgIHJldHVybiBGYWxzZQ0KDQoNCiMgY29tbWFuZCBsaW5lIGFyZyBwYXJzaW5nIHRvIG1ha2UgZm9sa3MgaGFwcHkgd2hvIHdhbnQgdG8gcnVuIGF0IG1vbmdvbGFicyBvciBtb25nb2hxDQojIHRoaXMgZnVuY3Rpb25zIHVzZXMgZ2xvYmFsIHZhcnMgdG8gY29tbXVuaWNhdGUuIGZvcmdpdmUgbWUuDQpkZWYgYXJnX3BhcnNpbmcoYXJndik6DQoNCiAgICBnbG9iYWwgd2ViaG9zdA0KICAgIGdsb2JhbCBtb25nb3N0cg0KICAgIGdsb2JhbCBkYl9uYW1lDQoNCiAgICB0cnk6DQogICAgICAgIG9wdHMsIGFyZ3MgPSBnZXRvcHQuZ2V0b3B0KGFyZ3YsICItcDotbTotZDoiKQ0KICAgIGV4Y2VwdCBnZXRvcHQuR2V0b3B0RXJyb3I6DQogICAgICAgIHByaW50ICJ1c2FnZSB2YWxpZGF0ZS5weSAtcCB3ZWJob3N0IC1tIG1vbmdvQ29ubmVjdFN0cmluZyAtZCBkYXRhYmFzZU5hbWUiDQogICAgICAgIHByaW50ICJcdHdlYmhvc3QgZGVmYXVsdHMgdG8gezB9Ii5mb3JtYXQod2ViaG9zdCkNCiAgICAgICAgcHJpbnQgIlx0bW9uZ29Db25uZWN0aW9uU3RyaW5nIGRlZmF1bHQgdG8gezB9Ii5mb3JtYXQobW9uZ29zdHIpDQogICAgICAgIHByaW50ICJcdGRhdGFiYXNlTmFtZSBkZWZhdWx0cyB0byB7MH0iLmZvcm1hdChkYl9uYW1lKQ0KICAgICAgICBzeXMuZXhpdCgyKQ0KICAgIGZvciBvcHQsIGFyZyBpbiBvcHRzOg0KICAgICAgICBpZiAob3B0ID09ICctaCcpOg0KICAgICAgICAgICAgcHJpbnQgInVzYWdlIHZhbGlkYXRlLnB5IC1wIHdlYmhvc3QgLW0gbW9uZ29Db25uZWN0U3RyaW5nIC1kIGRhdGFiYXNlTmFtZSINCiAgICAgICAgICAgIHN5cy5leGl0KDIpDQogICAgICAgIGVsaWYgb3B0IGluICgiLXAiKToNCiAgICAgICAgICAgIHdlYmhvc3QgPSBhcmcNCiAgICAgICAgICAgIHByaW50ICJPdmVycmlkaW5nIEhUVFAgaG9zdCB0byBiZSAiLCB3ZWJob3N0DQogICAgICAgIGVsaWYgb3B0IGluICgiLW0iKToNCiAgICAgICAgICAgIG1vbmdvc3RyID0gYXJnDQogICAgICAgICAgICBwcmludCAiT3ZlcnJpZGluZyBNb25nb0RCIGNvbm5lY3Rpb24gc3RyaW5nIHRvIGJlICIsIG1vbmdvc3RyDQogICAgICAgIGVsaWYgb3B0IGluICgiLWQiKToNCiAgICAgICAgICAgIGRiX25hbWUgPSBhcmcNCiAgICAgICAgICAgIHByaW50ICJPdmVycmlkaW5nIE1vbmdvREIgZGF0YWJhc2UgdG8gYmUgIiwgZGJfbmFtZQ0KDQoNCiMgbWFpbiBzZWN0aW9uIG9mIHRoZSBjb2RlDQpkZWYgbWFpbihhcmd2KToNCiAgICAgICAgICAgIA0KICAgIGFyZ19wYXJzaW5nKGFyZ3YpDQogICAgZ2xvYmFsIGNvbm5lY3Rpb24NCiAgICBnbG9iYWwgZGINCg0KICAgIHByaW50ICJXZWxjb21lIHRvIHRoZSBIVyAyLjMgdmFsaWRhdGlvbiB0ZXN0ZXIiDQoNCiAgICAjIGNvbm5lY3QgdG8gdGhlIGRiIChtb25nb3N0ciB3YXMgc2V0IGluIGFyZ19wYXJzaW5nKQ0KICAgIGNvbm5lY3Rpb24gPSBweW1vbmdvLk1vbmdvQ2xpZW50KG1vbmdvc3RyKQ0KICAgIGRiID0gY29ubmVjdGlvbltkYl9uYW1lXQ0KICAgICAgICAgICAgDQoNCiAgICB1c2VybmFtZSA9IG1ha2Vfc2FsdCg3KQ0KICAgIHBhc3N3b3JkID0gbWFrZV9zYWx0KDgpDQoNCiAgICAjIHRyeSB0byBjcmVhdGUgdXNlcg0KDQogICAgaWYgKGNyZWF0ZV91c2VyKHVzZXJuYW1lLCBwYXNzd29yZCkpOg0KICAgICAgICBwcmludCAiVXNlciBjcmVhdGlvbiBzdWNjZXNzZnVsLiAiDQogICAgICAgICMgdHJ5IHRvIGxvZ2luDQogICAgICAgIGlmICh0cnlfdG9fbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKSk6DQogICAgICAgICAgICBwcmludCAiVXNlciBsb2dpbiBzdWNjZXNzZnVsLiINCiAgICAgICAgICAgIHByaW50ICJWYWxpZGF0aW9uIENvZGUgaXMgIiwgImprZmRzNTgzNGo5OGZubTM5bmpmMDkyMGYwMiINCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50ICJVc2VyIGxvZ2luIGZhaWxlZCINCiAgICAgICAgICAgIHByaW50ICJTb3JyeSwgeW91IGhhdmUgbm90IHNvbHZlZCBpdCB5ZXQuIg0KDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQgIlNvcnJ5LCB5b3UgaGF2ZSBub3Qgc29sdmVkIGl0IHlldC4iDQogICAgICAgIHN5cy5leGl0KDEpDQoNCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBtYWluKHN5cy5hcmd2WzE6XSkNCg=="
eval(compile(base64.b64decode(code), "<string>", 'exec'))
